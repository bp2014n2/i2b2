diff --git a/webclient/js-i2b2/cells/plugins/GIRIXPlugin/GIRIXPluginCtrl.js b/webclient/js-i2b2/cells/plugins/GIRIXPlugin/GIRIXPluginCtrl.js
index 78740de..399201a 100644
--- a/webclient/js-i2b2/cells/plugins/GIRIXPlugin/GIRIXPluginCtrl.js
+++ b/webclient/js-i2b2/cells/plugins/GIRIXPlugin/GIRIXPluginCtrl.js
@@ -400,8 +400,16 @@ i2b2.GIRIXPlugin.initDDFields = function(scriptlet) {
 	}
 };
 
+i2b2.GIRIXPlugin.setParameter = function(parameter, value){
+  document.getElementsByClassName("input-"+parameter)[0].value = value
+}
+
+
 // This function is used for asyncronous calls
-i2b2.GIRIXPlugin.requestResults = function(callback) {
+i2b2.GIRIXPlugin.requestResults = function(diagram, params, callback) {
+        i2b2.GIRIXPlugin.setParameter("requestDiagram", diagram)
+        i2b2.GIRIXPlugin.setParameter("params", params)
+ 
 	// Get handles
 	var piList = $("girix-pilist");
 	var errorDivNoPI = $("girix-error-emptyPI");
@@ -549,9 +557,13 @@ i2b2.GIRIXPlugin.requestResults = function(callback) {
         // Send message (see above)
 	var scoped_callback = new i2b2_scopedCallback;
 	scoped_callback.scope = this;
-	scoped_callback.callback = callback;
+	scoped_callback.callback = function(result) { result.parse(); callback(result.model[0].value); }
 	var commObjRef = eval("(i2b2.GIRIX.ajax)");
 	commObjRef['getRResults']("GIRIXPlugin Client", messParams, scoped_callback);
+
+        i2b2.GIRIXPlugin.setParameter("requestDiagram", "all")
+        i2b2.GIRIXPlugin.setParameter("params", "{}")
+ 
 };
 
 
@@ -789,8 +801,11 @@ i2b2.GIRIXPlugin.displayResults = function(cbResults) {
 		// For security reasons the result values are escaped -> No HTML tags will be interpreted
 		//parValue.innerHTML = i2b2.h.Escape(cbResults.model[i].value);
 		parValue.innerHTML = cbResults.model[i].value;
-                exec_body_scripts(parValue)
-		newNode.className = "girix-result-element";
+		replaceScriptsRecurse(document.getElementById("girix-result"))
+                var arr = document.getElementById("girix-result")
+                for (var n = 0; n < arr.length; n++)
+                    eval(arr[n].innerHTML)
+                newNode.className = "girix-result-element";
 		if (cbResults.model[i].type == "data.frame" || cbResults.model[i].type == "matrix") {
 			// Do not escape here. Otherwise the table HTML tags will be escaped and therefore the table will not be properly dispayed
 			// Note that this is NOT a security flaw here as the 'xtable' R-module is smart enough to output encode the table's content
@@ -1010,54 +1025,24 @@ i2b2.GIRIXPlugin.doShowCalendar = function(dateInputId) {
 
 };
 
-exec_body_scripts = function(body_el) {
-    // Finds and executes scripts in a newly added element's body.
-    // Needed since innerHTML does not run scripts.
-    //
-    // Argument body_el is an element in the dom.
-
-    function nodeName(elem, name) {
-          return elem.nodeName && elem.nodeName.toUpperCase() ===
-                          name.toUpperCase();
-            };
-
-      function evalScript(elem) {
-            var data = (elem.text || elem.textContent || elem.innerHTML || "" ),
-                        head = document.getElementsByTagName("head")[0] ||
-                                            document.documentElement,
-                                script = document.createElement("script");
-
-                script.type = "text/javascript";
-                    try {
-                            // doesn't work on ie...
-                            script.appendChild(document.createTextNode(data));      
-                                } catch(e) {
-                                        // IE has funky script nodes
-                                        script.text = data;
-                                            }
-
-                        head.insertBefore(script, head.firstChild);
-                            head.removeChild(script);
-                              };
-
-        // main section of function
-        var scripts = [],
-                  script,
-                        children_nodes = body_el.childNodes,
-                              child,
-                                    i;
-
-          for (i = 0; children_nodes[i]; i++) {
-                child = children_nodes[i];
-                    if (nodeName(child, "script" ) &&
-                              (!child.type || child.type.toLowerCase() === "text/javascript")) {
-                                          scripts.push(child);
-                                                }
-                      }
-
-            for (i = 0; scripts[i]; i++) {
-                  script = scripts[i];
-                      if (script.parentNode) {script.parentNode.removeChild(script);}
-                          evalScript(scripts[i]);
-                            }
-};
+function replaceScriptsRecurse(node) {                                                      
+        if ( nodeScriptIs(node) ) {                                                         
+                var script  = document.createElement("script");                             
+                script.text = node.innerHTML;                                               
+
+                node.parentNode.replaceChild(script, node);                                 
+        }                                                                                   
+        else {                                                                              
+                var i        = 0;                                                           
+                var children = node.childNodes;                                             
+                while ( i < children.length) {                                              
+                        replaceScriptsRecurse( children[i] );                               
+                        i++;                                                                
+                }                                                                           
+        }                                                                                   
+
+        return node;                                                                        
+}                                                                                           
+function nodeScriptIs(node) {                                                               
+        return node.getAttribute && node.getAttribute("type") == "text/javascript";         
+}     
