//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v@@BUILD_VERSION@@ 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.04.28 at 11:05:15 PM MESZ 
//


package edu.harvard.i2b2.core.datavo.pdo;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlElementDecl;
import javax.xml.bind.annotation.XmlRegistry;
import javax.xml.namespace.QName;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the edu.harvard.i2b2.core.datavo.pdo package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {

    private final static QName _PatientData_QNAME = new QName("http://www.i2b2.org/xsd/hive/pdo/", "patient_data");

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: edu.harvard.i2b2.core.datavo.pdo
     * 
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link ConceptDimensionType }
     * 
     */
    public ConceptDimensionType createConceptDimensionType() {
        return new ConceptDimensionType();
    }

    /**
     * Create an instance of {@link ConceptBlobType }
     * 
     */
    public ConceptBlobType createConceptBlobType() {
        return new ConceptBlobType();
    }

    /**
     * Create an instance of {@link PatientIdeType }
     * 
     */
    public PatientIdeType createPatientIdeType() {
        return new PatientIdeType();
    }

    /**
     * Create an instance of {@link ObservationFactType }
     * 
     */
    public ObservationFactType createObservationFactType() {
        return new ObservationFactType();
    }

    /**
     * Create an instance of {@link PatientDataType.PatientDimensionSet }
     * 
     */
    public PatientDataType.PatientDimensionSet createPatientDataTypePatientDimensionSet() {
        return new PatientDataType.PatientDimensionSet();
    }

    /**
     * Create an instance of {@link PatientDataType.ProviderDimensionSet }
     * 
     */
    public PatientDataType.ProviderDimensionSet createPatientDataTypeProviderDimensionSet() {
        return new PatientDataType.ProviderDimensionSet();
    }

    /**
     * Create an instance of {@link PatientDataType.ObservationFactSet }
     * 
     */
    public PatientDataType.ObservationFactSet createPatientDataTypeObservationFactSet() {
        return new PatientDataType.ObservationFactSet();
    }

    /**
     * Create an instance of {@link ClobType }
     * 
     */
    public ClobType createClobType() {
        return new ClobType();
    }

    /**
     * Create an instance of {@link PatientDataType.VisitDimensionSet }
     * 
     */
    public PatientDataType.VisitDimensionSet createPatientDataTypeVisitDimensionSet() {
        return new PatientDataType.VisitDimensionSet();
    }

    /**
     * Create an instance of {@link PatientDataType.ConceptDimensionSet }
     * 
     */
    public PatientDataType.ConceptDimensionSet createPatientDataTypeConceptDimensionSet() {
        return new PatientDataType.ConceptDimensionSet();
    }

    /**
     * Create an instance of {@link EncounterIdeType }
     * 
     */
    public EncounterIdeType createEncounterIdeType() {
        return new EncounterIdeType();
    }

    /**
     * Create an instance of {@link MappingType }
     * 
     */
    public MappingType createMappingType() {
        return new MappingType();
    }

    /**
     * Create an instance of {@link PatientDataType }
     * 
     */
    public PatientDataType createPatientDataType() {
        return new PatientDataType();
    }

    /**
     * Create an instance of {@link PatientDimensionType }
     * 
     */
    public PatientDimensionType createPatientDimensionType() {
        return new PatientDimensionType();
    }

    /**
     * Create an instance of {@link VisitBlobType }
     * 
     */
    public VisitBlobType createVisitBlobType() {
        return new VisitBlobType();
    }

    /**
     * Create an instance of {@link VisitDimensionType }
     * 
     */
    public VisitDimensionType createVisitDimensionType() {
        return new VisitDimensionType();
    }

    /**
     * Create an instance of {@link ObservationBlobType }
     * 
     */
    public ObservationBlobType createObservationBlobType() {
        return new ObservationBlobType();
    }

    /**
     * Create an instance of {@link PatientIdType }
     * 
     */
    public PatientIdType createPatientIdType() {
        return new PatientIdType();
    }

    /**
     * Create an instance of {@link PatientBlobType }
     * 
     */
    public PatientBlobType createPatientBlobType() {
        return new PatientBlobType();
    }

    /**
     * Create an instance of {@link ProviderDimensionType }
     * 
     */
    public ProviderDimensionType createProviderDimensionType() {
        return new ProviderDimensionType();
    }

    /**
     * Create an instance of {@link EncounterIdType }
     * 
     */
    public EncounterIdType createEncounterIdType() {
        return new EncounterIdType();
    }

    /**
     * Create an instance of {@link ProviderBlobType }
     * 
     */
    public ProviderBlobType createProviderBlobType() {
        return new ProviderBlobType();
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PatientDataType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.i2b2.org/xsd/hive/pdo/", name = "patient_data")
    public JAXBElement<PatientDataType> createPatientData(PatientDataType value) {
        return new JAXBElement<PatientDataType>(_PatientData_QNAME, PatientDataType.class, null, value);
    }

}
