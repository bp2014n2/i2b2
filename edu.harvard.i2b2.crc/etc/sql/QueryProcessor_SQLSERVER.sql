CREATE TABLE QT_QUERY_MASTER (
       QUERY_MASTER_ID int  identity(1,1) PRIMARY KEY
     , NAME VARCHAR(50) NOT NULL
     , USER_ID VARCHAR(50) NOT NULL
     , GROUP_ID VARCHAR(50) NOT NULL
     , CREATE_DATE DATEtime NOT NULL
     , DELETE_DATE DATEtime 
     , REQUEST_XML text
    , GENERATED_SQL text
     
);




CREATE INDEX QT_IDX_QM_UGID ON QT_QUERY_MASTER(USER_ID,GROUP_ID,NAME);


CREATE TABLE QT_QUERY_RESULT_TYPE (
       RESULT_TYPE_ID int  PRIMARY KEY
     , NAME VARCHAR(100)
     , DESCRIPTION VARCHAR(200)
);





CREATE TABLE QT_QUERY_STATUS_TYPE (
       STATUS_TYPE_ID int   PRIMARY KEY
     , NAME VARCHAR(100)
     , DESCRIPTION VARCHAR(200)
);






CREATE TABLE QT_QUERY_INSTANCE (
       QUERY_INSTANCE_ID int  identity(1,1) PRIMARY KEY
     , QUERY_MASTER_ID int 
     , USER_ID VARCHAR(50) NOT NULL
     , GROUP_ID VARCHAR(50) NOT NULL
     , BATCH_MODE VARCHAR(50)
     , START_DATE DATEtime NOT NULL
     , END_DATE DATEtime
     , STATUS_TYPE_ID int 
     , CONSTRAINT QT_FK_QI_MID FOREIGN KEY (QUERY_MASTER_ID)
                  REFERENCES QT_QUERY_MASTER (QUERY_MASTER_ID)
     , CONSTRAINT QT_FK_QI_STID FOREIGN KEY (STATUS_TYPE_ID)
                  REFERENCES QT_QUERY_STATUS_TYPE (STATUS_TYPE_ID)
  
     
);

 

CREATE INDEX QT_IDX_QI_UGID ON QT_QUERY_INSTANCE(USER_ID,GROUP_ID);



CREATE INDEX QT_IDX_QI_MSTARTID ON QT_QUERY_INSTANCE(QUERY_MASTER_ID,START_DATE);



CREATE TABLE QT_QUERY_RESULT_INSTANCE (
       RESULT_INSTANCE_ID int  identity(1,1) PRIMARY KEY
     , QUERY_INSTANCE_ID int 
     , RESULT_TYPE_ID int NOT NULL
     , SET_SIZE int
     , START_DATE DATEtime NOT NULL
     , END_DATE   DATEtime
     , STATUS_TYPE_ID int NOT NULL
     , CONSTRAINT QT_FK_QRI_RID FOREIGN KEY (QUERY_INSTANCE_ID)
                  REFERENCES QT_QUERY_INSTANCE (QUERY_INSTANCE_ID)
     , CONSTRAINT QT_FK_QRI_RTID FOREIGN KEY (RESULT_TYPE_ID)
                  REFERENCES QT_QUERY_RESULT_TYPE (RESULT_TYPE_ID)
     , CONSTRAINT QT_FK_QRI_STID FOREIGN KEY (STATUS_TYPE_ID)
                  REFERENCES QT_QUERY_STATUS_TYPE (STATUS_TYPE_ID)
                  
);






CREATE TABLE QT_PATIENT_SET_COLLECTION ( 
	PATIENT_SET_COLL_ID bigint  identity(1,1) PRIMARY KEY
	,RESULT_INSTANCE_ID int
	,SET_INDEX int
	,PATIENT_NUM int
	,CONSTRAINT QT_FK_PSC_RI FOREIGN KEY (RESULT_INSTANCE_ID )
                  REFERENCES QT_QUERY_RESULT_INSTANCE (RESULT_INSTANCE_ID)
);


CREATE INDEX QT_IDX_QPSC_RIID ON QT_PATIENT_SET_COLLECTION(RESULT_INSTANCE_ID);






CREATE TABLE QT_PATIENT_ENC_COLLECTION (
	 PATIENT_ENC_COLL_ID int  identity(1,1) PRIMARY KEY
	, RESULT_INSTANCE_ID int
	, SET_INDEX int
	, PATIENT_NUM int
	, ENCOUNTER_NUM int
	, CONSTRAINT QT_FK_PESC_RI FOREIGN KEY (RESULT_INSTANCE_ID)
                  REFERENCES QT_QUERY_RESULT_INSTANCE(RESULT_INSTANCE_ID)
);


CREATE TABLE QT_XML_RESULT (
       XML_RESULT_ID int  identity(1,1) PRIMARY KEY
     , RESULT_INSTANCE_ID int
     , XML_VALUE text
     , CONSTRAINT QT_FK_XMLR_RIID FOREIGN KEY (RESULT_INSTANCE_ID)
                  REFERENCES QT_QUERY_RESULT_INSTANCE (RESULT_INSTANCE_ID)
);


alter table qt_query_master add delete_flag varchar(3);

alter table qt_query_instance add delete_flag varchar(3);

alter table qt_query_result_instance add delete_flag varchar(3);

//Set Delete flag to 'N' for all the records
update QT_QUERY_MASTER set delete_flag='N';

update QT_QUERY_INSTANCE set delete_flag='N';

update QT_QUERY_RESULT_INSTANCE set delete_flag='N';



insert into QT_QUERY_STATUS_TYPE(STATUS_TYPE_ID,NAME,DESCRIPTION) values(1,'QUEUED',' WAITING IN QUEUE TO START PROCESS')

insert into QT_QUERY_STATUS_TYPE(STATUS_TYPE_ID,NAME,DESCRIPTION) values(2,'PROCESSING','PROCESSING')

insert into QT_QUERY_STATUS_TYPE(STATUS_TYPE_ID,NAME,DESCRIPTION) values(3,'FINISHED','FINISHED')

insert into QT_QUERY_STATUS_TYPE(STATUS_TYPE_ID,NAME,DESCRIPTION) values(4,'ERROR','ERROR')

insert into QT_QUERY_STATUS_TYPE(STATUS_TYPE_ID,NAME,DESCRIPTION) values(5,'INCOMPLETE','INCOMPLETE')

insert into QT_QUERY_STATUS_TYPE(STATUS_TYPE_ID,NAME,DESCRIPTION) values(6,'COMPLETED','COMPLETED')


insert into QT_QUERY_RESULT_TYPE(RESULT_TYPE_ID,NAME,DESCRIPTION) values(1,'PATIENTSET','Patient Set');

insert into QT_QUERY_RESULT_TYPE(RESULT_TYPE_ID,NAME,DESCRIPTION) values(2,'PATIENT_ENCOUNTER_SET','Patient With Encounter Set');

insert into QT_QUERY_RESULT_TYPE(RESULT_TYPE_ID,NAME,DESCRIPTION) values(3,'XML','XML Result');

insert into QT_QUERY_RESULT_TYPE(RESULT_TYPE_ID,NAME,DESCRIPTION) values(4,'PATIENT_COUNT_XML','Patient Count XML');

insert into QT_QUERY_RESULT_TYPE(RESULT_TYPE_ID,NAME,DESCRIPTION) values(5,'PATIENT_GENDER_COUNT_XML','Patient Gender Count XML ');

insert into QT_QUERY_RESULT_TYPE(RESULT_TYPE_ID,NAME,DESCRIPTION) values(6,'PATIENT_MORTALITY_COUNT_XML','Patient Gender Count XML ');


// Create Lookup table 
CREATE TABLE "CRC_DB_LOOKUP" 
   (	"C_DOMAIN_ID" VARCHAR(255 ), 
	"C_PROJECT_PATH" VARCHAR(500), 
	"C_OWNER_ID" VARCHAR(255 ), 
	"C_DB_FULLSCHEMA" VARCHAR(255 ), 
	"C_DB_DATASOURCE" VARCHAR(500 ), 
	"C_DB_SERVERTYPE" VARCHAR(255 ), 
	"C_DB_NICENAME" VARCHAR(500), 
	"C_DB_TOOLTIP" VARCHAR(500) , 
	"C_COMMENT" text, 
	"C_ENTRY_DATE" DATEtime, 
	"C_CHANGE_DATE" DATEtime, 
	"C_STATUS_CD" CHAR(1 ), 
	 CONSTRAINT "CDL_PK" PRIMARY KEY ("C_DOMAIN_ID", "C_PROJECT_PATH", "C_OWNER_ID")
   ) 

